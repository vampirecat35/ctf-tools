from Crypto.Util.number import *
from pwn import hexdump

def egcd(a, b):
    u, u1 = 1, 0
    v, v1 = 0, 1
    while b:
        q = a // b
        u, u1 = u1, u - q * u1
        v, v1 = v1, v - q * v1
        a, b = b, a - q * b
    return a, u, v

def modinv(a, m):
    g, x, y = egcd(a, m)
    print a, m, g, x, y
    if g != 1:
        raise ValueError
    return x % m

# http://crypto.stackexchange.com/questions/31109/rsa-enc-decryption-with-multiple-prime-modulus-using-crt/31112#31112
def decrypt3(r1, r2, r3, e, N, ct):
    # Two solutions to recover d and d1,d2,d3
    if True:
        d = modinv(e, (r1-1)*(r2-1)*(r3-1))
        d1 = d % (r1 - 1)
        d2 = d % (r2 - 1)
        d3 = d % (r3 - 1)
    else:
        d1 = modinv(e, r1 - 1)
        d2 = modinv(e, r2 - 1)
        d3 = modinv(e, r3 - 1)
    print "d1, d2, d3:", d1, d2, d3

    m = r1

    t2 = modinv(m, r2)
    m = m * r2
    t3 = modinv(m, r3)
    m = m * r3

    x1 = pow(ct % r1, d1, r1)
    x2 = pow(ct % r2, d2, r2)
    x3 = pow(ct % r3, d3, r3)

    x = x1
    m = r1

    x = x + m * ((x2 - x % r2) * t2 % r2)
    m = m * r2
    x = x + m * ((x3 - x % r3) * t3 % r3)
    m = m * r3

    print "x:", x
    print hexdump(long_to_bytes(x))
    return x


if __name__ == "__main__":
    import sys
    if len(sys.argv) == 1:
        print "Usage: %s <r1> <r2> <r3> <e> <N> <ct>" % sys.argv[0]
    else:
        args = [int(x) for x in sys.argv[1:]]
        decrypt3(*tuple(args))


# http://crypto.stackexchange.com/questions/31109/rsa-enc-decryption-with-multiple-prime-modulus-using-crt/31112#31112
if False:
    r1=931164518537359
    r2=944727352543879
    r3=982273258722607
    e=5
    N=864102436520313334659779717201860718296307527
    ct=529481440313141057262802385309623737292746309
    decrypt3(r1, r2, r3, e, N, ct)
    exit()


#https://golang.org/src/crypto/rsa/rsa_test.go
if False:
    r1=1025363189502892836833747188838978207017355117492483312747347695538428729137306368764177201532277413433182799108299960196606011786562992097313508180436744488171474690412562218914213688661311117337381958560443
    r2=3467903426626310123395340254094941045497208049900750380025518552334536945536837294961497712862519984786362199788654739924501424784631315081391467293694361474867825728031147665777546570788493758372218019373
    r3=4597024781409332673052708605078359346966325141767460991205742124888960305710298765592730135879076084498363772408626791576005136245060321874472727132746643162385746062759369754202494417496879741537284589047
    e=3
    N=16346378922382193400538269749936049106320265317511766357599732575277382844051791096569333808598921852351577762718529818072849191122419410612033592401403764925096136759934497687765453905884149505175426053037420486697072448609022753683683718057795566811401938833367954642951433473337066311978821180526439641496973296037000052546108507805269279414789035461158073156772151892452251106173507240488993608650881929629163465099476849643165682709047462010581308719577053905787496296934240246311806555924593059995202856826239801816771116902778517096212527979497399966526283516447337775509777558018145573127308919204297111496233
    ct=8472002792838218989464636159316973636630013835787202418124758118372358261975764365740026024610403138425986214991379012696600761514742817632790916315594342398720903716529235119816755589383377471752116975374952783629225022962092351886861518911824745188989071172097120352727368980275252089141512321893536744324822590480751098257559766328893767334861211872318961900897793874075248286439689249972315699410830094164386544311554704755110361048571142336148077772023880664786019636334369759624917224888206329520528064315309519262325023881707530002540634660750469137117568199824615333883758410040459705787022909848740188613313
    decrypt3(r1, r2, r3, e, N, ct)
    exit()
